## TESTS FOR RATITE-SPECIFIC ACCELERATION, ETC ##

#for each chicken-ratite pair, get the alignability including duplicates for that pair (should be 0, 1, 2+)
#run in alignDepths subdir
for $SP in droNov casCas aptHaa aptOwe aptRow rheAme rhePen strCam
do
	halAlignmentDepth --inMemory --countDupes --noAncestors --targetGenomes $SP ~/ratite_scratch/wga/ratite_final_20150627/ratiteAlign.hal galGal > galGal-$SP.align.wig &
done

#everything below is run in the accelTests subdir

#setup:
#make galGal chrom list for downstream processing
cut -f1,1 ../galGal.chromsizes | sort -u > chr.list

#get beds
cp ../ce_beds/final_ces_noratite.tree2.bed.gz final_noratite_tree2.bed.gz
cp ../ce_beds/final_ces.tree2.bed.gz final_all_tree2.bed.gz
gunzip *.bed.gz

#general procedure for acceleration tests:
#goal is to do three things:
#0) should implement some missing-data filters and some duplication filters
#1) run standard phyloP to get test of acceleration for each ratite branch, all ratite branches together, and the tinamou clade
#2) run standard phyloP with the same set of branches but on a set of 5e6 random alignments generated by msa_view
#--the tricky part here is matching the length distribution
#3) run phyloP with SPH option to estimate posterior distribution of sites?

#0: filter beds
#use alignability to make sure element is present in half of species
#use coverage to make sure element is not duplicated in any ratites
#use coverage to make sure element is present in at least 50% of ratites

#0b: set up random sampled branches
##generate a null model with 10 random samples of lineages
#get named tree file

for i in 1 2 3 4 5
do
	brinput=$(nw_labels named_tree.nh | grep -v "anoCar" | chooseLines -k 13 - | tr '\n' ',')
	echo $brinput > rand$i.branches	
done

#clean up random sets

#1:
mkdir all_species
cd all_species
mkdir -p ratite tips clades tinamou
NEUTMOD="$HOME/ratite_scratch/wga/phast/neutMods/neut_ver2_final.named.mod"
BED="../final_all_tree2.bed"
for CHR in $(cat ../chr.list)
do
	ALIGN="$HOME/ratite_scratch/wga/phast/final_mafs/$CHR.ss"
	if [[ -f $ALIGN ]]
	then
		grep "^$CHR" $BED > $CHR.temp.bed
		sbatch ../est_accel.sh $NEUTMOD $CHR $ALIGN
	fi
done
cd ..

#1b: running with ratite-removed bed
mkdir ratite_removed
cd ratite_removed
mkdir -p ratite tips clades tinamou
NEUTMOD="$HOME/ratite_scratch/wga/phast/neutMods/neut_ver2_final.named.mod"
tree_doctor --prune rheAme,rhePen,strCam,droNov,casCas,aptHaa,aptOwe,aptRow $NEUTMOD > noratite_neut.mod
BED="../final_noratite_tree2.bed"
for CHR in $(cat ../chr.list)
do
	ALIGN="$HOME/ratite_scratch/wga/phast/final_mafs/$CHR.ss"
	if [[ -f $ALIGN ]]
	then
		grep "^$CHR" $BED > $CHR.temp.bed
		msa_view $ALIGN --seqs rhePen,rheAme,strCam,aptHaa,aptRow,aptOwe,casCas,droNov --exclude --out-format SS > $CHR.nor.ss
		sbatch ../est_accel.sh noratite_neut.mod $CHR $CHR.nor.ss
	fi
done


#2:
#first need to make fake alignments
#this code gets a SS alignment of all the conserved elements
mkdir -p random
cd random
BED="../final_noratite_tree2.bed"
for CHR in $(cat ../chr.list)
do
	ALIGN="../../final_mafs/$CHR.ss"
	if [[ -f $ALIGN ]]
	then
		grep "^$CHR" $BED > $CHR.temp.bed
		msa_split $ALIGN --by-category --features $CHR.temp.bed --in-format SS --out-format SS --out-root $CHR.cons
	fi
done
SPLIST="galGal,pseHum,taeGut,ficAlb,corBra,melUnd,falPer,picPub,lepDis,halLeu,aptFor,pygAde,fulGla,nipNip,balReg,chaVoc,calAnn,chaPel,cucCan,colLiv,mesUni,melGal,anaPla,aptHaa,aptOwe,aptRow,casCas,droNov,cryCin,tinGut,eudEle,notPer,rheAme,rhePen,strCam,allMis,allSin,croPor,gavGan,chrPic,cheMyd,anoCar"
FILELIST=$(ls *.cons.bed_feature-1.ss)
msa_view --aggregate $SPLIST $FILELIST --out-format SS > all.cons.ss
#now read this in R and generate the necessary bed file and sampled alignment to run phyloP
#load R
export LD_LIBRARY_PATH=""
module purge
module load R
module load pcre
export R_LIBS_USER=$HOME/sw/R:$R_LIBS_USER
R

#R script here:
library(rphast)
align<-read.msa("all.cons.ss")
elements<-read.feat("../final_all_tree2.bed")
#now we will get the lengths of the features
ele.len<-elements$end - elements$start
#now simluate 100,000 bed elements for each feature length, rounded to the nearest 5 bp
mround <- function(x,base){ 
        base*round(x/base) 
} 
ele.len.5bp<-unique(mround(ele.len,5))
nrep<-1e6
for (splitLength in ele.len.5bp) {
	simMsa<-sample.msa(align, nrep*splitLength, replace=TRUE)
	output.name.msa<-paste0(c("sampled.", splitLength, "bp.ss"), collapse="")
	output.name.gff<-paste0(c("sampled.", splitLength, "bp.gff"), collapse="")
	startIdx<-seq(from=1, by=splitLength, length.out=nrep)
	simFeat<-feat(seqname=names.msa(simMsa)[1], src="sim", feat=".", start=startIdx, end=startIdx+splitLength-1)
	write.feat(simFeat, file=output.name.gff)	
	write.msa(simMsa, file=output.name.msa)
}

#now can run phyloP like:
#phyloP --method LRT --features sampled.30bp.gff --mode ACC --branch rheAme $HOME/ratite_scratch/wga/phast/neutMods/neut_ver2_final.named.mod sampled.30bp.ss

