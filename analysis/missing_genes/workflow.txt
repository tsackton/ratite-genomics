PseudoSearch

1. Began with the GCF_000002315.3_Gallus_gallus-4.0_genomic.gff (chicken GFF file).
2. Ran GFF_CDS_grab.py to extract only the lines that denote CDS regions of protein coding genes.
3. Ran Convert_GFF_to_BED.py to convert this CDS only chicken GFF file to a CDS only chicken BED file.
4. Ran liftover.sh to utilize halLiftover with the chicken BED file and each target genome.  This program produces a psl file which contains a lot of wonderful information about how each chicken exon for each chicken gene aligns with each target genome in our massive whole genome alignment.
5. Obtained all refGenomes from Tim’s folder in the Edwards lab and created indexes for each using Indexmaker.sh which calls to index maker.py
6. Ran psl_checker.sh which calls psl_tester.py.  This allowed me to determine the different classes of exons within the psls for all species.  These were classified as: 
 a. perfect: the entire chicken exon aligns to the target genome and these two exons are identical in size)
 b. imperfect: the entire chicken exon aligns to the target genome, but there is at least one insertion or deletion) 
 c. falseStart: the beginning of the alignment is not at the beginning of the chicken exon
 d. falseEnd: the end of the alignment is not at the end of the chicken exon
 e. falseBoth: the beginning and end of the alignment are not at the beginning or end of the chicken exon
7. Ran psl_Duplicate.sh which calls psl_duplicate_parser.py in order to split the psl file for each species into two psl files, the first contains only those genes which appear as 1-to-1 orthologs in our alignment, the second contains all those genes that have at least one region that aligns to more than one position on the chicken.
8. Ran psl_duplicate_checker.py to ensure that all lines of each genomes’ psl file were placed in either singles or duplicates.
9. Ran psl_checker.sh again to compare the before and after effects of removing duplicates. Maybe?
10. Ran psl_dictionary_parser.py with psl_dict.sbatch through psl_submit.sh to generate concatenated transcripts for each gene.
11. Ran translation_tester.py on a subset of the genomes to determine if one strand orientation was being concatenated incorrectly.
12. Ran multifasta_reader.py on all genomes to get 3 pieces of information: (1) translate the transcript, (2) identify the number of orfs in each transcript, pull the longest orf for each transcript.
