README - PALAEOGNATH PHYLOGENY - UCES
===============

PURPOSE: infer palaeognath phylogenetic relationships using ultraconserved element (UCE) markers

Note that scripts were written for the Odyssey Cluster at Harvard University, and therefore might 
include code to account for program stops/restarts on Odyssey's serial_requeue partition, and/or 
hard-coded paths to software installations and user directories.

---------------

1. DATASET COMPILATION

We used the dataset of 3,679 UCE markers compiled by the Avian Phylogenomics Project as described in
Jarvis et al. (2014, Science 346:1320-1331).  UCE alignments were accessed from: GigaScience
Database, http://dx.doi.org/10.5524/101041/FASTA_files_of_loci_datasets.tar.gz  

a) UCE sequences for the chicken, ostrich, and white-throated tinamou released with this dataset 
   were used as references to lift over to all other palaeognath species in the whole-genome
   alignment (WGA) with halLiftover v2.1 (from HAL tools, Hickey et al. 2013 Bioinformatics 29:1341-
   1342, https://github.com/glennhickey/hal).  

   Input reference annotations in .bed format are provided in: dataset_compilation/input_annotations
   [Note that chicken coordinates are given for the galGal4 genome release as used in the whole-
    genome alignment]

   e.g. halLiftover --outPSLWithName ratiteAlign.hal galGal galGal_coding_exons.bed droNov \
        droNov_coding_exons_liftover.psl 

   Output: dataset_compilation/halLiftover/ contains .psl format files for each reference-target
   liftover (e.g. galGal-droNov_uces_halLiftover.psl)


b) Parse liftover .psl output to retain cases where there is a unique region in a target species
   from all reference liftovers for a given UCE locus
   
   Script: parse_halLiftover.pl
   Output: e.g. dataset_compilation/halLiftover/droNov_uces_parsed_liftover.bed

   Output UCE coordinates to retrieve, allowing up to 1 missing species per locus, but requiring
   sequence for ostrich (because it was tested as a potential outgroup in some analyses)
   Script: write_uce_dataset_coords.pl
   Output: dataset_compilation/uces_3158_loci_list [list of final dataset loci, N=3158]
           dataset_compilation/halLiftover/droNov_uces_to_use.bed (e.g. for each species, the
           coordinates for loci used in the final compiled dataset)

   Compile sequences in .fasta format (1 file per UCE locus):
   Script: write_input_fastas.pl


c) Add sequence for North Island brown kiwi (Apteryx mantelli [aptMan]; Le Duc et al. 2015, Genome
   Biol 16:147)
   This genome was released after computation of the whole-genome alignment, so the liftover
   approach above could not be used.  Instead, sequences were identified from blastn searches using
   the other 3 kiwi species as queries.

   Script: write_aptMan_blastn_queries.pl
   Output: dataset_compilation/aptMan_blastn/aptHaa_blastn_queries.fasta, 
   aptOwe_blastn_queries.fasta, aptRow_blastn_queries.fasta; e.g. in each case, a fasta with all 
   UCE seqs for each of the 3 kiwi from WGA

   Script: aptMan_blastn_template.pl 
   Wrapper to run blastn search using NCBI's 'somewhat similar' parameters: evalue 1e-10, 
   perc_identity 10, penalty -3, reward 2, gapopen 5, gapextend 2, word_size 11
   Output: e.g. dataset_compilation/aptMan_blastn/aptHaa-aptMan_blastn_results, a tab-delimited 
   text file with the top hit for each locus for a given query species

   Script: write_aptMan_seqs_to_retrieve.pl
   Output: dataset_compilation/aptMan_blastn/aptMan_seqs_to_retrieve, a tab-delimited text file 
   with 1-based coordinates for blastn hits that are consistent across query species,
   and had a single target HSP covering at least 50% of query sequence, with minimum 80% identity

   Script: add_aptMan_uce_seqs.pl to append sequences to single-locus fastas


d) Add sequence for little bush moa (Anomalopteryx didiformis [anoDid], a reference-based genome 
   assembly mapping reads to the emu [droNov] genome).
   This approach used the emu (droNov) UCE coordinates lifted over from the chicken (galGal) 
   reference, and mapped them to their corresponding moa coordinates using whole-scaffold emu-moa
   alignments produced during the creation of the moa genome assembly.  The moa genome assembly is 
   described in Cloutier et al. 20XX (REF), with the nuclear genome deposited under NCBI accession
   XXXX, and accompanying data (including emu-moa scaffold alignments) available under Dryad digital
   repository DOI:XXXX.  Moa sequence was appended to existing alignments if it covered at least
   30% of the reference emu length, or was at least 200 bp (excluding uncalled bases, Ns).


e) Add chicken (galGal4) outgroup sequence

   Script: add_galGal_uce_seqs.pl to append sequences to single-locus fastas

---------------

2. ALIGNMENTS & ALIGNMENT TRIMMING/FILTERING

a) Sequences were aligned with MAFFT v. 7.245 (Katoh and Standley 2013, Mol Biol Evol 30:772-780) 
   and default options for local, iterative progressive alignment
   e.g. linsi in.fasta > out.fasta
   [DATASET: alignments/single_locus_fastas/UCEs_mafft.tar.gz, N= 3,158 loci]


b) Column-based filtering of MAFFT alignments used trimAl v. 1.2rev59 (Capella-Gutierrez et al. 2009,
   Bioinformatics 25:1972-1973) and the 'automated1' option to heuristically choose trimming 
   parameters based on input alignment characteristics
   e.g. trimAl -in in.fasta -out out.fasta -automated1
   [DATASET: alignments/single_locus_fastas/UCEs_mafft_trimAl.tar.gz, N= 3,158 loci]


c) MAFFT alignments were filtered to retain loci with no missing species, and alignment 
   columns with no gaps, Ns, or ambiguity characters, and setting a minimum alignment length of 
   200 bp after removal of missing data.
   Script: write_no_missing_data_alignments.pl
   [DATASET: alignments/single_locus_fastas/UCEs_mafft_no_missing_data.tar.gz, N= 1,837 loci]


d) FINAL ALIGNMENT PROCESSING:
   Script: write_raxml_input.pl
   Final processing step for all datasets; removes any gap/N-only alignment columns and converts
   to all uppercase.

---------------

3. PHYLOGENETIC INFERENCE: COALESCENT-BASED

   MP-EST v. 1.5 (Liu et al. 2010, BMC Evol Biol 10:302) was used for coalescent-based phylogenetic 
   tree inference from input maximum-likelihood (single-locus) genetrees built using RAxML v. 8.1.5 
   (Stamatakis 2014, Bioinformatics 30:1312-1313).  The MP-EST species tree topology and branch 
   lengths (in coalescent units) were calculated from input RAxML best maximum likelihood trees, 
   and support values were calculated by running MP-EST on input RAxML bootstrap replicates.   

a) RAxML genetrees: 

   Best maximum likelihood gene trees were inferred for each locus from the unpartitioned DNA 
   alignment using a GTR + GAMMA substitution model and 20 independent tree searches beginning 
   from random starting tree topologies.

   e.g. raxmlHPC-SSE3 -k -s in.fasta -p $RANDOM -N 20 -d -n [locusname] -w [/path/to/output/dir/]
   Output for each dataset is provided in: gene_trees/RAxML_bestML_trees


   500 bootstrap replicates were inferred for each locus from the unpartitioned DNA 
   alignment using a GTR + GAMMA substitution model.

   e.g. raxmlHPC-SSE3 -k -s in.fasta -p $RANDOM -b $RANDOM -N 500 -m GTRGAMMA -n [locusname] \
        -w [/path/to/output/directory/]
   Output for each dataset is provided in: gene_trees/RAxML_bootstraps

b) RAxML gene trees were rooted on the chicken outgroup using ETE v. 3 (Huerta-Cepas et al. 2016,
   Mol Biol Evol 33:1635-1638).

c) For both best maximum likelihood RAxML trees and RAxML bootstrap tree input, 3 independent 
   replicates of MP-EST were performed for each dataset, with a different starting seed specified
   each time, and with a random starting tree and 10 independent tree searches per input genetree.

   Input to MP-EST consists of 'genetree' files containing 1 RAxML tree per locus and a control 
   file specifying run parameters for each 'genetree'.  Creation of input files for the bootstrap
   replicate runs was automated:
   Script: create_mpest_input.pl
   Outputs a directory structure holding all MP-EST input for a run

   Each 'genetree' replicate is then run with a call to its control file:
   e.g. mpest control_1

   Output was parsed to retain the highest scoring tree from amongst the 10 tree searches per 
   input 'genetree'
   Script: parse_mpest_output.pl
   MP-EST output is provided in: species_trees/MP-EST

---------------

4. PHYLOGENETIC INFERENCE: MAXIMUM-LIKELIHOOD OF CONCATENATED DATASETS

   ExaML v. 3.0.16 (Kozlov et al. 2015, Bioinformatics 31:2577-2579) was used to infer 
   maximum-likelihood toplogies from fully partitioned (1 partition/locus), concatenated datasets.

a) Concatenated alignments & partition files were compiled for each data set:

   Script: write_concat_alignment.pl
   Outputs a concatenated alignment in .phylip format
   e.g. alignments/concatenated_datasets/UCEs_mafft.phylip.gz

   Script: write_concat_partitionfile.pl
   Outputs a list of 1 partition/locus for the alignment file above
   e.g. alignments/concatenated_datasets/UCEs_mafft_partitions


b) Best ML tree search

   Script: ExaML_concat_best_ML_tree_input.pl
   Perl wrapper that converts the alignment+partition files into ExaML binary format, and generates
   20 complete random starting trees, and 1 random stepwise addition order parsimony starting tree.
   N.B. with relatively few taxa, identical parsimony starting trees were almost always generated
   & therefore only one was used in tree searches

   ExaML was then run separately for each starting tree:
   e.g. mpirun -np 2 examl-AVX -m GAMMA -s in.binary -t StartingTree -n [output_filename]

c) Bootstrapping

   Script: ExaML_concat_bootstrap_input.pl
   Perl wrapper to create bootstrap replicates from the input concatenated alignment, convert each
   bootstrap+partition file into ExaML binary input format, and generate a random starting 
   tree to run each bootstrap replicate.  Each bootstrap replicate was then run in ExaML as per the 
   full ML tree search above.

   Convergence was assessed after every 50 bootstrap replicates with the extended majority-rule 
   consensus tree criterion a posteriori bootstopping analysis in RAxML:

   cat ExaML_result.* > bootstraps
   raxmlHPC-SSE3 -m GTRGAMMA -p $RANDOM -z bootstraps -I autoMRE -n check_bs
  
   After convergence (or, after > 200 replicates if bootstraps failed to converge), bootstrap 
   support values were placed on the best-scoring maximum likelihood tree with RAxML:

   raxmlHPC-SSE3 -m GTRGAMMA -f b -z bootstraps -t best_ML_tree -n [output_name]
   Output of ExaML tree searches is provided in: species_trees/ExaML

